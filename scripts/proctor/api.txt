Example config


var exam = new Proctor();

exam.must([
  "VariableDeclaration",
  "ExpressionStatement",
  "FunctionDeclaration",
  "ExpressionStatement"
]);

exam.mustNot([
  "WhileStatement"
]);

exam.structure([
  {
    type: "FunctionDeclaration",
    contains: [
      "ExpressionStatement",
      "VariableDeclaration",
    ]
  },
  {
    type: "ForStatement",
    contains: [
      "ExpressionStatement",
      "VariableDeclaration",
    ]
  },
  {
    type: "FunctionDeclaration",
    contains: [
      "SwitchStatement",
      "SwitchCase",

    ]
  },

]);

exam.grade( code, callback );

exam.getResults(); // all
exam.getResultsMust();
exam.getResultsMustNot();
exam.getResultsStructure();

Returns:
{
  must: [
    {
      "type": "VariableDeclaration",
      "pass": true,
      "message": "Used a variable declaration."
    },
    {
      "type": "ExpressionStatement",
      "pass": true,
      "message": "Used an expression statement."
    },
    {
      "type": "FunctionDeclaration",
      "pass": false,
      "message": "You must use a function declaration."
    },
    {
      "type": "ExpressionStatement",
      "pass": false,
      "message": "You must use a second expression statement."
    }
  ],
  mustNot: [
    {
      "type": "WhileStatement",
      "pass": false,
      "message": "You must not use a while statement."
    },
    {
      "type": "SwitchStatement",
      "pass": true,
      "message": "You did not use a switch statement."
    }
  ],
  structure: [
    {
      "type": "VariableDeclaration",
      "pass": true,
      "message": "You used a variable declaration"
    },
    {
      "type": "ExpressionStatement",
      "pass": false,
      "message": "You must use an an expression statement"
    },
    {
      "type": "ExpressionStatement",
      "pass": false,
      "message": "You must use an an expression statement"
    },
    {type: "FunctionDeclaration", body: [
      {type: "ExpressionStatement"}
    ]},
  ]
}
